{{- define "vstr" -}}
"{{ replace (replace (replace . `"` `" + {"""} + "` -1) `${` `" +` -1) `}$` `+ "` -1}}"
{{- end }}

vcl 4.1;

import std;
import directors;
import xkey;
import var;

{{ if eq (getenv "BACKEND_PROBE") "true" }}
probe delivery_probe {
  .url = "{{ getenv "BACKEND_PROBE_URL" }}";
  .interval = {{ getenv "BACKEND_PROBE_INTERVAL" }};
  .timeout = {{ getenv "BACKEND_PROBE_TIMEOUT" }};
  .window = {{ getenv "BACKEND_PROBE_WINDOW" }};
  .threshold = {{ getenv "BACKEND_PROBE_THRESHOLD" }};
  .initial = {{ getenv "BACKEND_PROBE_THRESHOLD" }};
}
{{ end }}

{{ $BACKENDS := (split (getenv "BACKEND") ",") }}
{{ $REMOTE_BACKENDS := (split (getenv "REMOTE_BACKEND") ",") }}

{{ $ERROR_PAGE := getenv "ERROR_PAGE" "" }}
{{ $ERROR_PAGE_SEG := split $ERROR_PAGE "/" }}
{{ $IS_ERROR_PAGE_REMOTE := eq "http:" (index $ERROR_PAGE_SEG 0) }}
{{ define "ERROR_PAGE_PATH" -}}
  {{- $ERROR_PAGE := getenv "ERROR_PAGE" "" -}}
  {{- $ERROR_PAGE_SEG := split $ERROR_PAGE "/" -}}
  {{- $IS_ERROR_PAGE_REMOTE := eq "http:" (index $ERROR_PAGE_SEG 0) -}}
  {{- if $IS_ERROR_PAGE_REMOTE -}}
    {{- replace $ERROR_PAGE (printf "http://%s" (index $ERROR_PAGE_SEG 2)) "" 1 -}}
  {{- else -}}
    {{- $ERROR_PAGE -}}
  {{- end -}}
{{- end -}}

{{ if $IS_ERROR_PAGE_REMOTE }}
backend backend_error {
  {{- $backend := (split (index $ERROR_PAGE_SEG 2) ":") }}
  .host = "{{ index $ERROR_PAGE_SEG 2 }}";
  .port = "{{ if eq 2 (len $backend) }}{{ index $backend 1 }}{{ else }}80{{ end }}";
}
{{ end }}

{{ range $backendIndex, $hostnameWithPort := $BACKENDS }}
  {{- $backend := (split $hostnameWithPort ":") }}
  {{ range $ipIndex, $ip := lookupIP (index $backend 0) }}
backend backend_delivery_{{ $backendIndex }}_{{ $ipIndex }} {
  .host = "{{ $ip }}";
  .port = "{{ if eq 2 (len $backend) }}{{ index $backend 1 }}{{ else }}80{{ end }}";

  .max_connections        = {{ getenv "BACKEND_MAX_CONNECTIONS" }};
  .first_byte_timeout     = {{ getenv "BACKEND_FIRST_BYTES_TIMEOUT" }}; # How long to wait before we receive a first byte from our backend?
  .between_bytes_timeout  = {{ getenv "BACKEND_BETWEEN_BYTES_TIMEOUT" }};  # Max time to wait for next package in an http response
  .connect_timeout        = {{ getenv "BACKEND_CONNECT_TIMEOUT" }};  # How long to wait for a backend connection?
  {{ if eq (getenv "BACKEND_PROBE") "true" }}.probe = delivery_probe;{{ end }}
}
  {{ end }}
{{ end }}

{{ if (getenv "REMOTE_BACKEND") }}
  # Remote backends are unmonitored backends that only
  {{ range $backendIndex, $hostnameWithPort := $REMOTE_BACKENDS }}
    {{ $backend := (split $hostnameWithPort ":") }}

    {{ range $ipIndex, $ip := lookupIP (index $backend 0) }}
backend backend_remote_{{ $backendIndex }}_{{ $ipIndex }} {
  .host = "{{ $ip }}";
  .port = "{{ if eq 2 (len $backend) }}{{ index $backend 1 }}{{ else }}80{{ end }}";
}
    {{ end }}
  {{ end }}
{{ end }}

{{ $PURGE_IP_WHITELIST := (split (getenv "PURGE_IP_WHITELIST") ",") }}

# allowed to purge
acl purge {
  # Localhost
  "localhost";
  "127.0.0.1";
  "::1";
  # Private networks
  "10.0.0.0"/8;
  "172.16.0.0"/12;
  "192.168.0.0"/16;
  {{ range $i, $ipRange := $PURGE_IP_WHITELIST }}
  {{ $ipRange }};
  {{ end }}
}

sub vcl_init {
  var.global_set("health", "200");

  new delivery = directors.round_robin();
  {{- range $backendIndex, $hostnameWithPort := $BACKENDS -}}
    {{- $backend := (split $hostnameWithPort ":") -}}
    {{ range $ipIndex, $ip := lookupIP (index $backend 0) }}
  delivery.add_backend(backend_delivery_{{ $backendIndex }}_{{ $ipIndex }});
    {{- end -}}
  {{- end }}

{{ if (getenv "REMOTE_BACKEND") }}
  {{ range $backendIndex, $hostnameWithPort := $REMOTE_BACKENDS }}
  new remote_{{ $backendIndex }} = directors.round_robin();
    {{- range $backendIndex, $hostnameWithPort := $BACKENDS -}}
      {{- $backend := (split $hostnameWithPort ":") -}}
      {{ range $ipIndex, $ip := lookupIP (index $backend 0) }}
  remote_{{ $backendIndex }}.add_backend(backend_remote_{{ $backendIndex }}_{{ $ipIndex }});
      {{- end -}}
    {{- end }}
  {{ end }}
{{ end }}
}

sub vcl_recv {
  if (req.url == "/_health") {
    set req.http.status = var.global_get("health");

    if (req.method == "POST") {
      if (client.ip ~ purge) {
        var.global_set("health", req.http.health);
      } else {
        return (synth(405, "The IP '" + client.ip + "' is not allowed to send a POST /_health request."));
      }
    }

    return (synth(222, req.http.status));
  }

  # Allow purging
  if (req.method == "BAN") {
    # purge is an ACL defined above, we check the ip is in there
    if (std.ip(req.http.x-forwarded-for, "0.0.0.0") !~ purge) {
      return (synth(405, "The IP '" + req.http.x-forwarded-for + "' is not allowed to send BAN requests."));
    }

    if (req.http.xkey) {
      set req.http.n-gone = xkey.softpurge(req.http.xkey);
      return (synth(200, "Invalidated " + req.http.n-gone + " objects"));
    } else if (req.http.ban) {
      ban(req.http.ban);
      return (synth(200, "Banned"));
    } else {
      ban("obj.http.url ~ " + req.url);
      return (synth(200, "Banned"));
    }
  }

  if (req.http.Error-Status) {
    set req.http.host = "error";
    {{ if $ERROR_PAGE }}
    set req.url = regsub("{{ template "ERROR_PAGE_PATH" }}", "{{`{{code}}`}}", req.http.Error-Status);
    {{ end }}
    set req.backend_hint = {{ if $IS_ERROR_PAGE_REMOTE }}backend_error{{ else }}delivery.backend(){{ end }};
  }
  {{ if (getenv "REMOTE_BACKEND") }}
  {{ range $backendIndex, $hostnameWithPort := $REMOTE_BACKENDS }}
    {{- $backend := (split $hostnameWithPort ":") }}
    {{- $hostname := (index $backend 0) }}
  else if (req.http.host == "{{ $hostname }}") {
    set req.backend_hint = remote_{{ $backendIndex }}.backend();
  }
  {{ end }}
  {{ end }}
  else {
    set req.backend_hint = delivery.backend();
  }

  # Support websockets
  if (req.http.upgrade ~ "(?i)websocket") { return (pipe); }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD" && req.method != "OPTIONS") { return (pass); }

  {{ if eq (getenv "VARNISH_STRIP_QUERYSTRING") "true" }}
  # Strip all query strings
  set req.url = regsub(req.url, "\?.*$", "");
  {{ else }}
  # Some generic URL cleanup, useful for all templates that follow
  # First remove the Google Analytics added parameters, useless for our backend
  if (req.url ~ "(\?|&)(dmcid|fbclid|gclid|utm_[a-z]+|originalReferrer)=") {
    set req.url = regsuball(req.url, "(dmcid|fbclid|gclid|utm_[a-z]+|originalReferrer)=[-_A-z0-9+()%./:]+&?", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Normalize the query arguments
  set req.url = std.querysort(req.url);
  {{ end }}

  # Nuke all cookies
  unset req.http.Cookie;
  unset req.http.X-Cache;

  {{ getenv "VARNISH_CUSTOM_SCRIPT" "" }}

  return (hash);
}

// Websocket support
sub vcl_pipe {
  set req.http.X-Cache = "pipe";
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
    set bereq.http.connection = req.http.connection;
  }
}

# Called after vcl_recv to create a hash value for the request. This is used
# as a key to look up the object in Varnish.
# These hash subs are executed in order, they should not return anything
# and the hashed data will later on get concatenated by the default vcl_hash.
sub vcl_hash {
  # Cache based on hostname or ip
  if (req.http.host) { hash_data(req.http.host); }
  else { hash_data(server.ip); }

  # Cache based on user agent
  if (req.http.User-Agent ~ "^[a-zA-Z0-9-]+$") { hash_data(req.http.User-Agent); }
  if (req.http.Authorization) { hash_data(req.http.Authorization); }

  # Cache based on url
  hash_data(req.url);
}

sub vcl_backend_fetch {
  if (bereq.retries > 0) {
    if (bereq.http.host == "error") { set bereq.backend = {{ if $IS_ERROR_PAGE_REMOTE }}backend_error{{ else }}delivery.backend(){{ end }}; }
    else { set bereq.backend = delivery.backend(); }
  }
  return (fetch);
}

# Handle the HTTP request coming from our backend
# Called after the response headers has been successfully retrieved from the backend.
sub vcl_backend_response {
  if (bereq.uncacheable) { return (deliver); }
  set beresp.http.url = bereq.url;

  # We don't use any cookies, remove them to prevent security issues
  unset beresp.http.Set-Cookie;

  # Enable ESI for pages that request it
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    set beresp.do_esi = true;
  }

  # Make sure that varnish always saves the gzipped content, even
  # when the backend just returns raw text content
  if (beresp.http.content-type ~ "text/(plain|xml|css|html)"
      || beresp.http.content-type ~ "javascript"
      || beresp.http.content-type ~ "font-(ttf|opentype|woff)"
      || beresp.http.content-type ~ "application/vnd\.ms-fontobject"
      || beresp.http.content-type ~ "image/svg"
   ) {
    set beresp.do_gzip = true;
  }

  if (beresp.http.content-type ~ "(webp|jpeg|bmp|tiff|gif|png|woff|tar|rar|zip|pdf)") {
    set beresp.do_stream = true;
  }

  # Directly pass 50x responses to handle_request_errors
  if (beresp.status >= 500 && beresp.status <= 504) {
    if (bereq.is_bgfetch) { return (abandon); }
    if (bereq.retries < 1) { return (retry); }

    {{ if $ERROR_PAGE }}
    if (bereq.http.host == "error") { return (abandon); }
    set beresp.ttl = 15s;
    set beresp.http.Follow-Error-Status = beresp.status;
    return (deliver);
    {{ else }}
    set beresp.ttl = 15s;
    return (deliver);
    {{ end }}
  }

  if (bereq.http.host == "error") {
    set beresp.grace = 30d;
    set beresp.ttl = 5m;
    return (deliver);
  }

  # Directly pass 404 statuses, cache for 10s to throttle requests to a backend
  # Check how we want to invalidate pages. Are 410 responses properly handled?
  if (beresp.status == 404) {
    set beresp.ttl = 10s;
    return (deliver);
  }

  # Allow stale content, in case the backend goes down.
  # We make Varnish keep all objects for 24 hours (default_grace config) beyond their TTL
  if (beresp.http.X-Varnish-Grace) { set beresp.grace = std.duration(beresp.http.X-Varnish-Grace + "s"); }
}

# Called before a cached/fresh object is delivered to the client.
sub vcl_deliver {
  if (resp.http.Follow-Error-Status) {
    set req.http.Error-Status = resp.http.Follow-Error-Status;
    return (restart);
  } else if (req.http.host == "error") {
    set resp.status = std.integer(req.http.Error-Status, 500);
    set resp.http.Follow-Error-Status = resp.status;
  } else if (resp.http.Follow-Location == "true") {
    set req.url = resp.http.Location;
    return (restart);
  }

  # Add Cache Grace Info to Response (set in vcl_hit)
  if (resp.http.X-Served-By) { set resp.http.X-Served-By = "{{getenv "HOSTNAME_PREFIX" ""}}{{getenv "HOSTNAME"}}, " + resp.http.X-Served-By; }
  else { set resp.http.X-Served-By = "{{getenv "HOSTNAME_PREFIX" ""}}{{getenv "HOSTNAME"}}"; }

  if (resp.http.X-Cache) { set resp.http.X-Cache = req.http.X-Cache + ", " + resp.http.X-Cache; }
  else { set resp.http.X-Cache = req.http.X-Cache; }

  if (resp.http.X-Cache-Hits) { set resp.http.X-Cache-Hits = obj.hits + ", " + resp.http.X-Cache-Hits; }
  else { set resp.http.X-Cache-Hits = "" + obj.hits; }

  # Disable ETag for ESI pages as the ETag of subrequests doesn't propagate to the parent
  # Pages served would always rely on the cache of the main page and therefore
  # never refresh, even if the subrequest is updated
  if (resp.http.Surrogate-Control ~ "ESI/1.0") {
    unset resp.http.ETag;
    unset resp.http.Last-Modified;
  }

  # Remove some headers
  unset resp.http.url;
  unset resp.http.Server;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.X-Generator;
  unset resp.http.Surrogate-Control;
  unset resp.http.X-Varnish-Grace;

  return (deliver);
}

sub vcl_hit {
  if (obj.ttl >= 0s) { set req.http.X-Cache = "HIT"; }
  else if (obj.ttl + obj.grace > 0s) { set req.http.X-Cache = "STALE"; }
  else if (obj.ttl + obj.grace + obj.keep > 0s) { set req.http.X-Cache = "KEEP"; }
  return (deliver);
}

sub vcl_miss {
  set req.http.X-Cache = "MISS";
  return (fetch);
}

sub vcl_backend_error {
  if (bereq.is_bgfetch) { return (abandon); }
  if (bereq.retries < 1) { return (retry); }

  {{ if $ERROR_PAGE }}
  if (bereq.http.host == "error") { return (abandon); }
  set beresp.ttl = 15s;
  set beresp.http.Follow-Error-Status = beresp.status;
  return (deliver);
  {{ else }}
  set beresp.ttl = 15s;
  set beresp.grace = 0s;
  return (retry);
  {{ end }}
}

sub vcl_synth {
  if (resp.status == 503 && req.http.host != "error") {
    if (resp.http.Follow-Error-Status) {set req.http.Error-Status = resp.http.Follow-Error-Status;}
    else {set req.http.Error-Status = resp.status;}
    return (restart);
  } else if (resp.status == 301) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 302) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 307) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 222) {
    set resp.status = std.integer(resp.reason, 503);
  }

  set resp.http.X-Served-By = "{{getenv "HOSTNAME_PREFIX" ""}}{{getenv "HOSTNAME"}}";
  set resp.http.X-Cache = "SYNTH";
  unset resp.http.X-Varnish;
  unset resp.http.Server;

  if (req.http.Content-Type ~ "application/json") {
    set resp.http.Content-Type = "application/json; charset=utf-8";
    set resp.body = {{ template "vstr" `{"status":${resp.status}$,"error":"${resp.reason}$"}`}};
  } else if (req.http.Content-Type ~ "text/html") {
    set resp.http.Content-Type = "text/html; charset=utf-8";
    set resp.body = {{ template "vstr" `<!DOCTYPE html><html><head><title>${resp.status}$ ${resp.reason}$</title></head><body><h1>${resp.status}$ ${resp.reason}$</h1></body></html>`}};
  } else {
    set resp.http.Content-Type = "text/plain; charset=utf-8";
    set resp.body = {{ template "vstr" `${resp.status}$ ${resp.reason}$` }};
  }

  return (deliver);
}

sub vcl_fini {
  return (ok);
}
