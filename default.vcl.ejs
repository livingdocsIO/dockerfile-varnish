vcl 4.1;

import std;
import directors;
import xkey;
import purge;
import var;
<%- config.hooks?.import || '' %>

<% for (const probe of config.probes) { %><%- include('probe', probe) %><% } -%>
<% for (const cluster of config.clusters) { %><%- include('backend', cluster) %><% } -%>
<% for (const acl of config.acl) { %><%- include('acl', acl) %><% } -%>

<%- config.hooks?.global || '' %>

sub vcl_init {
  var.global_set("health", "200");
  <% for (const cluster of config.clusters) { %><%- include('director', cluster) -%><% } %>
  <%- config.hooks?.vclInit || '' %>
}

sub can_purge {
  # acl_purge is an ACL defined above, we check the ip is in there
  if (client.ip !~ acl_purge) {
    return (synth(405, "The IP '" + client.ip + "' is not allowed to send " + req.method +  " requests."));
  }
}

sub vcl_recv {
  <%- config.hooks?.vclRecvStart || '' %>
  if (!req.http.host) { set req.http.host = "" + server.ip; }

  if (req.url == "/favicon.ico" || req.url == "/status") {
    std.log("nolog:true");
  } else if (req.url == "/_health") {
    std.log("nolog:true");
    set req.http.status = var.global_get("health");

    if (req.method == "POST") {
      if (client.ip ~ acl_purge) {
        set req.http.health = std.integer(req.http.health, 0);
        if (req.http.health !~ "^[2345]") {
          return (synth(405, "Cannot set the invalid health status code '" + req.http.health + "' using a POST /_health request."));
        }
        var.global_set("health", req.http.health);
      } else {
        return (synth(405, "The IP '" + client.ip + "' is not allowed to send a POST /_health request."));
      }
    }

    return (synth(222, req.http.status));
  }

  # Normalize the Accept Header, so we can cache based on that
  if (!req.http.Accept) { set req.http.Accept = "text/html"; }
  else if (req.http.Accept ~ "text/html") { set req.http.Accept = "text/html"; }
  else if (req.http.Accept ~ "application/json") { set req.http.Accept = "application/json"; }
  else if (req.http.Accept ~ "application/xml") { set req.http.Accept = "application/xml"; }
  else if (req.http.Accept ~ "text/plain") { set req.http.Accept = "text/plain"; }
  else { set req.http.Accept = "text/html"; }

  <% if (config.hooks?.vclRecvBackendHint) { %>
  <%- config.hooks?.vclRecvBackendHint %>
  <% } else { %>
  set req.backend_hint = <%- config.clusters[0].name %>.backend();
  <% } %>

  # BAN is a hard ban. The object won't ever served again in the frontend
  if (req.method == "BAN") {
    call can_purge;
    if (req.http.X-Cache-Tags) { std.ban("obj.http.xkey ~ " + req.http.X-Cache-Tags); }
    else if (req.http.X-Cache-Ban) { std.ban(req.http.X-Cache-Ban); }
    else if (req.http.ban) { std.ban(req.http.ban); }
    else { return (purge); }
    return (synth(200, "Banned"));
  }

  # PURGE is a soft ban. The object will still be served, but refreshed in the background
  if (req.method == "PURGE") {
    call can_purge;
    if (req.http.X-Cache-Tags) {
      xkey.softpurge(req.http.X-Cache-Tags);
      return (synth(200, "Purged"));
    }

    if (req.http.Cache-Control ~ "no-cache") { set req.hash_always_miss = true; }
    return (hash);
  }

  # Support websockets
  if (req.http.upgrade ~ "(?i)websocket") { return (pipe); }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD" && req.method != "OPTIONS") { return (pass); }

  <% if (config.stripQueryString) { %>
  # Strip all query strings
  set req.url = regsub(req.url, "\?.*$", "");
  <% } else { %>
  # Some generic URL cleanup, useful for all templates that follow
  # First remove the Google Analytics added parameters, useless for our backend
  if (req.url ~ "(\?|&)(dmcid|fbclid|gclid|utm_[a-z]+|originalReferrer)=") {
    set req.url = regsuball(req.url, "(dmcid|fbclid|gclid|utm_[a-z]+|originalReferrer)=[-_A-z0-9+()%./:]+&?", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Normalize the query arguments
  set req.url = std.querysort(req.url);
  <% } %>

  # Nuke all cookies
  unset req.http.Cookie;
  unset req.http.X-Cache;

  <%- config.hooks?.vclRecvEnd || '' %>
  return (hash);
}

// Websocket support
sub vcl_pipe {
  set req.http.X-Cache = "pipe";
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
    set bereq.http.connection = req.http.connection;
  }
}

# Called after vcl_recv to create a hash value for the request. This is used
# as a key to look up the object in Varnish.
# These hash subs are executed in order, they should not return anything
# and the hashed data will later on get concatenated by the default vcl_hash.
sub vcl_hash {
  # Cache based on hostname or ip
  hash_data(req.http.host);

  # Cache based on user agent
  if (req.http.User-Agent ~ "^[a-zA-Z0-9-]+$") { hash_data(req.http.User-Agent); }
  if (req.http.Authorization) { hash_data(req.http.Authorization); }

  hash_data(req.http.Accept);

  <%- config.hooks?.vclHash || '' %>

  # Cache based on url
  hash_data(req.url);
}

sub custom_purge {
  purge.soft();
  // Only wait for a refresh of the object when a Cache-Control: no-cache header is used
  if (!req.hash_always_miss) { return (synth(200, "Purged")); }
}

sub vcl_hit {
  if (req.method == "PURGE") { call custom_purge; }
  if (obj.ttl >= 0s) { set req.http.X-Cache = "HIT"; }
  else if (obj.ttl + obj.grace > 0s) { set req.http.X-Cache = "STALE"; }
  else if (obj.ttl + obj.grace + obj.keep > 0s) { set req.http.X-Cache = "KEEP"; }
  return (deliver);
}

sub vcl_miss {
  if (req.method == "PURGE") { call custom_purge; }
  set req.http.X-Cache = "MISS";
  return (fetch);
}

sub vcl_backend_fetch {
  // Support custom error pages
  if (bereq.retries > 0) {
    if (bereq.http.host == "error") { set bereq.backend = delivery.backend(); }
    else { set bereq.backend = delivery.backend(); }
  }
  return (fetch);
}

# Handle the HTTP request coming from our backend
# Called after the response headers has been successfully retrieved from the backend.
sub vcl_backend_response {
  if (bereq.uncacheable) { return (deliver); }

  # We don't use any cookies, remove them to prevent security issues
  unset beresp.http.Set-Cookie;

  # Enable ESI for pages that request it
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    set beresp.do_esi = true;
  }

  # Make sure that varnish always saves the gzipped content, even
  # when the backend just returns raw text content
  if (beresp.http.content-type ~ "(text|javascript|json|xml|font)") {
    set beresp.do_gzip = true;
  } else {
    set beresp.do_stream = true;
  }

  # Directly pass 50x responses to handle_request_errors
  if (beresp.status >= 500 && beresp.status <= 504) {
    if (bereq.is_bgfetch) { return (abandon); }
    if (bereq.retries < <%- config.fetchRetries %>) { return (retry); }

    set beresp.ttl = 15s;
    return (deliver);
  }

  # Directly pass 404 statuses, cache for 10s to throttle requests to a backend
  # Check how we want to invalidate pages. Are 410 responses properly handled?
  if (beresp.status == 404) {
    set beresp.ttl = 10s;
    return (deliver);
  }

  # Allow stale content, in case the backend goes down.
  # We make Varnish keep all objects for 24 hours (default_grace config) beyond their TTL
  if (beresp.http.X-Varnish-Grace) {
    set beresp.grace = std.duration(beresp.http.X-Varnish-Grace + "s", beresp.grace);
    unset beresp.http.X-Varnish-Grace;
  } else if (beresp.http.Cache-Control) {
    set beresp.http.X-Varnish-Grace = std.integer(regsub(beresp.http.Cache-Control,"^.*stale-if-error=([0-9]+).*$","\1"), 0);
    if (beresp.http.X-Varnish-Grace != "0") { set beresp.grace = std.duration(beresp.http.X-Varnish-Grace + "s"); }
    unset beresp.http.X-Varnish-Grace;
  }

  // Varnish suggests to save the url on a header,
  // so their std.ban() logic is more performant
  set beresp.http.url = bereq.url;

  # Support X-Cache-Tags headers for xkey, remove the original header
  if (beresp.http.X-Cache-Tags) {
    set beresp.http.xkey = beresp.http.X-Cache-Tags;
    unset beresp.http.X-Cache-Tags;
  }
}

# Called before a cached/fresh object is delivered to the client.
sub vcl_deliver {
  <%- config.hooks?.vclDeliverStart || '' %>
  // Always serve a synth response because we don't want to waste the bandwidth
  if (req.method == "PURGE") { return (synth(resp.status, "Purged")); }

  if (resp.http.Follow-Location == "true") {
    set req.url = resp.http.Location;
    return (restart);
  }

  # Add Cache Grace Info to Response (set in vcl_hit)
  if (resp.http.X-Served-By) { set resp.http.X-Served-By = "<%- config.xServedBy %>, " + resp.http.X-Served-By; }
  else { set resp.http.X-Served-By = "<%- config.xServedBy %>"; }

  if (resp.http.X-Cache) { set resp.http.X-Cache = req.http.X-Cache + ", " + resp.http.X-Cache; }
  else { set resp.http.X-Cache = req.http.X-Cache; }

  if (resp.http.X-Cache-Hits) { set resp.http.X-Cache-Hits = obj.hits + ", " + resp.http.X-Cache-Hits; }
  else { set resp.http.X-Cache-Hits = "" + obj.hits; }

  # Disable ETag for ESI pages as the ETag of subrequests doesn't propagate to the parent
  # Pages served would always rely on the cache of the main page and therefore
  # never refresh, even if the subrequest is updated
  if (resp.http.Surrogate-Control ~ "ESI/1.0") {
    unset resp.http.ETag;
    unset resp.http.Last-Modified;
  }

  # Remove some headers
  unset resp.http.url;
  unset resp.http.Server;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.X-Generator;
  unset resp.http.Surrogate-Control;
  unset resp.http.xkey;

  <%- config.hooks?.vclDeliverEnd || '' %>
  return (deliver);
}

sub vcl_backend_error {
  if (bereq.is_bgfetch) { return (abandon); }
  if (bereq.retries < <%- config.fetchRetries %>) { return (retry); }

  set beresp.ttl = 15s;
  set beresp.grace = 0s;
  return (retry);
}

sub vcl_synth {
  <%- config.hooks?.vclSynthStart || '' %>
  if (resp.status == 301) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 302) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 307) {
    set resp.http.location = resp.reason;
  } else if (resp.status == 222) {
    set resp.status = std.integer(resp.reason, 503);
  }

  set resp.http.X-Served-By = "<%- config.xServedBy %>";
  set resp.http.X-Cache = "SYNTH";
  unset resp.http.X-Varnish;
  unset resp.http.Server;

  if (req.http.Accept == "application/json") {
    set resp.http.Content-Type = "application/json; charset=utf-8";
    set resp.body = <%- vstr(`{"status":{{resp.status}},"message":"{{resp.reason}}"}`) %>;
  } else if (req.http.Accept == "text/html") {
    set resp.http.Content-Type = "text/html; charset=utf-8";
    set resp.body = <%- vstr(`<!DOCTYPE html><html><head><title>{{resp.status}} {{resp.reason}}</title></head><body><h1>{{resp.status}} {{resp.reason}}</h1></body></html>`) %>;
  } else {
    set resp.http.Content-Type = "text/plain; charset=utf-8";
    set resp.body = <%- vstr(`{{resp.status}} {{resp.reason}}` ) %>;
  }

  <%- config.hooks?.vclSynthEnd || '' %>
  return (deliver);
}

sub vcl_fini {
  return (ok);
}
